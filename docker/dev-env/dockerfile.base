FROM debian:10-slim

SHELL ["/bin/bash", "-o", "pipefail", "-c"]

LABEL maintainer=ronald

RUN apt-get update \
  && apt-get install -y --no-install-recommends \
  apt-transport-https="1.8*"  \
  bash-completion="1:2*" \
  ca-certificates="20*" \
  conntrack="1:1*" \
  curl="7.6*" \
  dnsutils="1:9*" \
  git="1:2*" \
  gnupg="2.2*" \
  gnupg2="2.2*" \
  htop="2.2*" \
  iproute2="4.*" \
  iptables="1.8*" \
  iputils-ping="3:2*" \
  less="487*" \
  lsb-release \
  netcat="1.10*" \
  ssh="1:7*" \
  sshfs="2.*" \
  telnet="0.17*" \
  tmux="2.8*" \
  tree="1.8*" \
  unzip="6.0*" \
  vim="2:8*" \
  zsh="5.7*" \
  python3 python3-pip gdebi-core \
  && rm -rf /var/lib/apt/lists/*

# Docker Client.

RUN DOCKER_VERSION="20.10.6" \
  && curl -fsSL "https://download.docker.com/linux/static/stable/$(uname -m)/docker-${DOCKER_VERSION}.tgz" \
  | tar --strip-components=1 -xz -C /usr/local/bin docker/docker \
  && docker -v \
  && unset DOCKER_VERSION

RUN COMPOSE_VERSION="1.26.2" \
  && curl -fsSL -o /usr/local/bin/docker-compose \
  "https://github.com/docker/compose/releases/download/${COMPOSE_VERSION}/docker-compose-$(uname -s)-$(uname -m)" \
  && chmod +x /usr/local/bin/docker-compose \
  && docker-compose version \
  && unset COMPOSE_VERSION

# Terraform.

RUN TERRAFORM_VERSION="1.1.8" \
  && curl -o terraform_linux_amd64.zip -fsSL \
  "https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip" \
  && unzip terraform_linux_amd64.zip -d /bin \
  && terraform -v \
  && rm -f terraform_linux_amd64.zip \
  && unset TERRAFORM_VERSION

# Terragrunt.

RUN TERRAGRUNT_VERSION="0.36.6" \
  && curl -o /bin/terragrunt -fsSL \
  "https://github.com/gruntwork-io/terragrunt/releases/download/v${TERRAGRUNT_VERSION}/terragrunt_linux_amd64" \
  && chmod +x /bin/terragrunt \
  && terragrunt -v \
  && unset TERRAGRUNT_VERSION

# Kubectl.

RUN KUBECTL_VERSION="1.20.0" \
  && curl -o /bin/kubectl -fsSL \
  "https://storage.googleapis.com/kubernetes-release/release/v${KUBECTL_VERSION}/bin/linux/amd64/kubectl" \
  && chmod +x /bin/kubectl \
  && kubectl completion bash > /etc/profile.d/kubectl.bash.inc \
  && kubectl completion zsh > /etc/profile.d/kubectl.zsh.inc \
  && kubectl -h \
  && unset KUBECTL_VERSION

# Kubectx.

RUN KUBECTX_VERSION="0.9.4" \
  && curl -o kubectx_linux_x86_64.tar.gz -fsSL \
  "https://github.com/ahmetb/kubectx/releases/download/v${KUBECTX_VERSION}/kubectx_v${KUBECTX_VERSION}_linux_x86_64.tar.gz" \
  && tar -xzvf kubectx_linux_x86_64.tar.gz -C /bin \
  && kubectx -h \
  && rm -f kubectx_linux_x86_64.tar.gz \
  && unset KUBECTX_VERSION

# Kubens.

RUN KUBENS_VERSION="0.9.4" \
  && curl -o kubens_linux_x86_64.tar.gz -fsSL \
  "https://github.com/ahmetb/kubectx/releases/download/v${KUBENS_VERSION}/kubens_v${KUBENS_VERSION}_linux_x86_64.tar.gz" \
  && tar -xzvf kubens_linux_x86_64.tar.gz -C /bin \
  && kubens -h \
  && rm -f kubens_linux_x86_64.tar.gz \
  && unset KUBENS_VERSION

# k9s

RUN K9S_VERSION="0.25.18" \
  curl -o k9s.tar.gz -fsSL \
    https://github.com/derailed/k9s/releases/download/v0.25.18/k9s_Linux_x86_64.tar.gz \
  && tar -zxvf k9s.tar.gz -C /bin \
  && k9s -h \
  && rm -rf k9s.tar.gz \
  && unset K9S_VERSION

# GCloud.

RUN GCLOUD_VERSION="378.0.0" \
  && curl -o google-cloud-sdk.tar.gz -fsSL \
  "https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-${GCLOUD_VERSION}-linux-x86_64.tar.gz" \
  && tar -xzvf google-cloud-sdk.tar.gz -C /bin \
  && /bin/google-cloud-sdk/install.sh -q \
  && rm -f google-cloud-sdk.tar.gz \
  && unset GCLOUD_VERSION

# Azure cli.

RUN AZURE_CLI_VERSION="2.25*" \
  && echo "deb [arch=amd64] https://packages.microsoft.com/repos/azure-cli/ buster main" \
  | tee /etc/apt/sources.list.d/azure-cli.list \
  && curl -L https://packages.microsoft.com/keys/microsoft.asc | apt-key add - \
  && apt-get update \
  && apt-get install -y --no-install-recommends azure-cli="${AZURE_CLI_VERSION}" \
  && rm -rf /var/lib/apt/lists/* \
  && az -v \
  && unset AZURE_CLI_VERSION

# ZSH

ENV ZSH='/etc/zsh/.oh-my-zsh'
ENV ZSH_CUSTOM=$ZSH/custom

RUN bash -c \
  "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/oh-my-zsh/master/tools/install.sh)" --unattended \
  && zsh -c 'autoload -U compinit && compinit'

# Install powelevel10k theme

RUN git clone --depth=1 https://github.com/romkatv/powerlevel10k.git ${ZSH_CUSTOM}/themes/powerlevel10k

# Install default plugins
RUN git clone \
        https://github.com/zsh-users/zsh-syntax-highlighting.git \
        ${ZSH_CUSTOM}/plugins/zsh-syntax-highlighting

RUN git clone \
        https://github.com/zsh-users/zsh-autosuggestions \
        ${ZSH_CUSTOM}/plugins/zsh-autosuggestions

# K3d

RUN K3D_VERSION="4.4.5"\
  && curl -o /bin/k3d -fsSL "https://github.com/rancher/k3d/releases/download/v${K3D_VERSION}/k3d-linux-amd64" \
  && chmod +x /bin/k3d \
  && k3d version \
  && k3d completion zsh > /etc/profile.d/k3d \
  && unset K3D_VERSION

# Helm

RUN HELM_VERSION="3.8.1" \
  && curl -o helm-amd64.tar.gz -fsSL \
  "https://get.helm.sh/helm-v${HELM_VERSION}-linux-amd64.tar.gz" \
  && tar -zxvf helm-amd64.tar.gz \
  && mv linux-amd64/helm /usr/local/bin/helm \
  && rm -rf helm-amd64.tar.gz linux-amd64 \
  && helm version \
  && unset HELM_VERSION

# Teleport

RUN TP_VERSION="9.0.3" \
  && curl -o teleport.tar.gz -fsSL \
  "https://get.gravitational.com/teleport-v${TP_VERSION}-linux-amd64-bin.tar.gz" \
  && tar -xzf teleport.tar.gz \
  && mv teleport/tctl teleport/tsh /usr/local/bin/ \
  && rm -rf teleport teleport.tar.gz \
  && tctl version \
  && tsh version \
  && unset TEL_VERSION

ENV PATH="/opt:$PATH"

# ArgoCD

RUN ARGO_VERSION='2.3.3' \
  && curl -o /usr/local/bin/argocd -fsSL \
  "https://github.com/argoproj/argo-cd/releases/download/v${ARGO_VERSION}/argocd-linux-amd64" \
  && chmod +x /usr/local/bin/argocd \
  && argocd version --client

# keybase

RUN curl --remote-name https://prerelease.keybase.io/keybase_amd64.deb  \
      && apt update \
      && apt install libappindicator1 -y \
      && gdebi ./keybase_amd64.deb --n \
      && rm keybase_amd64.deb

# 1Password CLI

RUN OP_VERSION='2.0.0' \
  && curl -fsSLO \
    "https://cache.agilebits.com/dist/1P/op2/pkg/v${OP_VERSION}/op_linux_amd64_v${OP_VERSION}.zip" \
  && unzip op_linux_amd64_v${OP_VERSION}.zip \
  && mv op /usr/bin \
  && rm op_linux_amd64_v${OP_VERSION}.zip

# install krew

ENV KREW_ROOT="/usr/local/bin/krew"
RUN KREW_VERSION="0.4.3" TEMP_DIR=$(mktemp -d) \
  && cd $TEMP_DIR \
  && curl -fsSLO "https://github.com/kubernetes-sigs/krew/releases/latest/download/krew-linux_amd64.tar.gz" \
  && tar zxvf krew-linux_amd64.tar.gz && ./krew-linux_amd64 install krew && rm -rf $TEMP_DIR
