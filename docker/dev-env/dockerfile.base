FROM ubuntu:22.04

LABEL maintainer=ronald

ENV TZ='America/Recife'

RUN rm -f /etc/apt/apt.conf.d/docker-clean; echo 'Binary::apt::APT::Keep-Downloaded-Packages "true";' > /etc/apt/apt.conf.d/keep-cache
RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
    --mount=type=cache,target=/var/lib/apt,sharing=locked \
      apt-get update && apt-get install sudo -y \
      && DEBIAN_FRONTEND="noninteractive" sudo apt-get -y install tzdata

RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
    --mount=type=cache,target=/var/lib/apt,sharing=locked \
  sudo apt-get update \
  && DEBIAN_FRONTEND="noninteractive" sudo  apt-get install -y --no-install-recommends \
    apt-transport-https \
    bash-completion \
    ca-certificates \
    conntrack \
    curl \
    dnsutils \
    git \
    gnupg \
    gnupg2 \
    htop \
    iproute2 \
    iptables \
    iputils-ping \
    less \
    lsb-release \
    netcat \
    socat \
    ssh \
    sshfs \
    telnet \
    tmux \
    tree \
    unzip \
    vim \
    zsh \
    fzf \
    python3 python3-pip \
  && rm -rf /var/lib/apt/lists/*

# ZSH

ENV ZSH='/etc/zsh/.oh-my-zsh'
ENV ZSH_CUSTOM=$ZSH/custom

RUN bash -c \
  "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/oh-my-zsh/master/tools/install.sh)" --unattended \
  && zsh -c 'autoload -U compinit && compinit'

# Install powelevel10k theme

RUN git clone --depth=1 \
        https://github.com/romkatv/powerlevel10k.git \
        ${ZSH_CUSTOM}/themes/powerlevel10k

# Install default plugins
RUN git clone --depth=1 \
        https://github.com/zsh-users/zsh-syntax-highlighting.git \
        ${ZSH_CUSTOM}/plugins/zsh-syntax-highlighting

RUN git clone --depth=1 \
        https://github.com/zsh-users/zsh-autosuggestions \
        ${ZSH_CUSTOM}/plugins/zsh-autosuggestions

# GCloud.

RUN GCLOUD_VERSION="421.0.0" \
  && curl -o google-cloud-sdk.tar.gz -fsSL \
  "https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-${GCLOUD_VERSION}-linux-x86_64.tar.gz" \
  && tar -xzvf google-cloud-sdk.tar.gz -C /bin \
  && /bin/google-cloud-sdk/install.sh -q \
  && rm -f google-cloud-sdk.tar.gz \
  && unset GCLOUD_VERSION

# Azure cli.

# RUN AZURE_CLI_VERSION="2.25*" \
#   && echo "deb [arch=amd64] https://packages.microsoft.com/repos/azure-cli/ buster main" \
#   | tee /etc/apt/sources.list.d/azure-cli.list \
#   && curl -L https://packages.microsoft.com/keys/microsoft.asc | apt-key add - \
#   && apt-get update \
#   && apt-get install -y --no-install-recommends azure-cli="${AZURE_CLI_VERSION}" \
#   && rm -rf /var/lib/apt/lists/* \
#   && az -v \
#   && unset AZURE_CLI_VERSION

# Docker Client.

RUN DOCKER_VERSION="20.10.6" \
  && curl -fsSL "https://download.docker.com/linux/static/stable/$(uname -m)/docker-${DOCKER_VERSION}.tgz" \
  | tar --strip-components=1 -xz -C /usr/local/bin docker/docker \
  && docker -v \
  && unset DOCKER_VERSION

RUN COMPOSE_VERSION="1.26.2" \
  && curl -fsSL -o /usr/local/bin/docker-compose \
  "https://github.com/docker/compose/releases/download/${COMPOSE_VERSION}/docker-compose-$(uname -s)-$(uname -m)" \
  && chmod +x /usr/local/bin/docker-compose \
  && docker-compose version \
  && unset COMPOSE_VERSION

# Terraform.

RUN TERRAFORM_VERSION="1.4.2" \
  && curl -o terraform_linux_amd64.zip -fsSL \
  "https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip" \
  && unzip terraform_linux_amd64.zip -d /bin \
  && terraform -v \
  && rm -f terraform_linux_amd64.zip \
  && unset TERRAFORM_VERSION

# yq

RUN YQ_VERSION="4.31.2" \
  && curl -o /usr/local/bin/yq -fsSL \
  "https://github.com/mikefarah/yq/releases/download/v${YQ_VERSION}/yq_linux_amd64" \
  && chmod +x /usr/local/bin/yq \
  && yq -V \
  && unset YQ_VERSION

# Terragrunt

RUN TERRAGRUNT_VERSION="0.45.0" \
  && curl -o /bin/terragrunt -fsSL \
  "https://github.com/gruntwork-io/terragrunt/releases/download/v${TERRAGRUNT_VERSION}/terragrunt_linux_amd64" \
  && chmod +x /bin/terragrunt \
  && terragrunt -v \
  && unset TERRAGRUNT_VERSION

# Kubectl

RUN KUBECTL_VERSION="1.25.4" \
  && curl -o /bin/kubectl -fsSL \
  "https://storage.googleapis.com/kubernetes-release/release/v${KUBECTL_VERSION}/bin/linux/amd64/kubectl" \
  && chmod +x /bin/kubectl \
  && kubectl completion bash > /etc/profile.d/kubectl.bash.inc \
  && kubectl completion zsh > /etc/profile.d/kubectl.zsh.inc \
  && kubectl -h \
  && unset KUBECTL_VERSION

# Kubectx

RUN KUBECTX_VERSION="0.9.4" \
  && curl -o kubectx_linux_x86_64.tar.gz -fsSL \
  "https://github.com/ahmetb/kubectx/releases/download/v${KUBECTX_VERSION}/kubectx_v${KUBECTX_VERSION}_linux_x86_64.tar.gz" \
  && tar -xzvf kubectx_linux_x86_64.tar.gz -C /bin \
  && kubectx -h \
  && rm -f kubectx_linux_x86_64.tar.gz \
  && unset KUBECTX_VERSION

# Kubens

RUN KUBENS_VERSION="0.9.4" \
  && curl -o kubens_linux_x86_64.tar.gz -fsSL \
  "https://github.com/ahmetb/kubectx/releases/download/v${KUBENS_VERSION}/kubens_v${KUBENS_VERSION}_linux_x86_64.tar.gz" \
  && tar -xzvf kubens_linux_x86_64.tar.gz -C /bin \
  && kubens -h \
  && rm -f kubens_linux_x86_64.tar.gz \
  && unset KUBENS_VERSION

# k9s

RUN K9S_VERSION="v0.27.3" \
  && TEMP_DIR="$(mktemp -d)" \
  && curl -o k9s.tar.gz -fsSLO \
  "https://github.com/derailed/k9s/releases/download/${K9S_VERSION}/k9s_Linux_amd64.tar.gz" \
  && tar -zxvf k9s.tar.gz -C "${TEMP_DIR}" \
  && mv ${TEMP_DIR}/k9s /usr/local/bin \
  && rm -rf k9s.tar.gz "${TEMP_DIR}" \
  && k9s version

# Helm

RUN HELM_VERSION="3.11.1" TEMP_DIR=$(mktemp -d) \
  && cd $TEMP_DIR \
  && curl "https://get.helm.sh/helm-v${HELM_VERSION}-linux-amd64.tar.gz" | tar -zxv linux-amd64/helm \
    | xargs -I % mv -- % /usr/local/bin/helm \
  && helm version \
  && unset HELM_VERSION && rm -rf $TEMP_DIR

# Teleport

RUN TELEPORT_VERSION="12.1.0" TEMP_DIR=$(mktemp -d) \
  && cd $TEMP_DIR \
  && curl -O https://cdn.teleport.dev/teleport-v${TELEPORT_VERSION}-linux-amd64-bin.tar.gz \
  && tar -xzf teleport-v${TELEPORT_VERSION}-linux-amd64-bin.tar.gz \
    teleport/tbot \
    teleport/tctl \
    teleport/tsh \
    teleport/teleport \
  && mv teleport/* /usr/local/bin \
  && tctl version \
  && tsh version \
  && rm -rf $TEMP_DIR

# ArgoCD

RUN ARGO_VERSION='2.3.3' \
  && curl -o /usr/local/bin/argocd -fsSL \
  "https://github.com/argoproj/argo-cd/releases/download/v${ARGO_VERSION}/argocd-linux-amd64" \
  && chmod +x /usr/local/bin/argocd \
  && argocd version --client

# 1Password CLI

RUN OP_VERSION='2.13.1' TEMP_DIR=$(mktemp -d) \
  && cd $TEMP_DIR \
  && curl -fsSLO \
    "https://cache.agilebits.com/dist/1P/op2/pkg/v${OP_VERSION}/op_linux_amd64_v${OP_VERSION}.zip" \
  && unzip op_linux_amd64_v${OP_VERSION}.zip \
  && mv op /usr/bin \
  && op --version \
  && rm -rf $TEMP_DIR

# lego
RUN LEGO_VERSION='4.10.2' TEMP_DIR=$(mktemp -d) \
  && cd $TEMP_DIR \
  && curl -fsSLO \
    "https://github.com/go-acme/lego/releases/download/v${LEGO_VERSION}/lego_v${LEGO_VERSION}_linux_amd64.tar.gz" \
  && tar -zxvf lego_v${LEGO_VERSION}_linux_amd64.tar.gz \
  && mv lego /usr/local/bin/lego \
  && rm -rf $TEMP_DIR \
  && lego -h

# doppler
RUN DOPPLER_VERSION='3.56.0' TEMP_DIR=$(mktemp -d) \
  && cd $TEMP_DIR \
  && curl -fsSLO \
    "https://github.com/DopplerHQ/cli/releases/download/${DOPPLER_VERSION}/doppler_${DOPPLER_VERSION}_linux_amd64.tar.gz" \
  && tar -zxvf doppler_${DOPPLER_VERSION}_linux_amd64.tar.gz \
  && mv doppler /usr/local/bin/doppler \
  && rm -rf $TEMP_DIR \
  && doppler -h
