global:
  domain: argocd.rnld.dev

server:
  topologySpreadConstraints:
    - maxSkew: 1
      topologyKey: kubernetes.io/hostname
      whenUnsatisfiable: ScheduleAnyway
      labelSelector:
        matchLabels:
          app.kubernetes.io/component: server

  ingress:
    enabled: true
    tls: true
    ingressClassName: nginx
    annotations:
      cert-manager.io/cluster-issuer: letsencrypt-prod-http

notifications:
 enabled: true
 notifiers:
  trigger.on-deployed: |
    - when: app.status.operationState.phase in ['Succeeded'] and app.status.health.status == 'Healthy'
      oncePer: app.status.sync.revision
      send: [deployed:]
  trigger.on-app-health-degraded: |
    - when: app.status.health.status == 'Degraded'
      send: [app-health-degraded:]
  subscriptions: |
    - recipients:
      - discord
      triggers:
        - on-app-health-degraded
        - on-deployed
  service.webhook.discord: |
    url: $rnld_discord_webhook_url
    headers:
    - name: Content-Type
      value: application/json
  template.deployed: |
    webhook:
      discord:
        method: POST
        body: |
          {
            "embeds": [
              {
                "title": "Bot {{.app.metadata.name}} implantado com sucesso",
                "url": "{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
                "fields": [
                  {
                    "name": "Repositório",
                    "value": "{{.app.spec.source.repoURL}}",
                    "inline": "false"
                  }
                ]
              }
            ]
          }
  template.app-health-degraded: |
    webhook:
      discord:
        method: POST
        body: |
          {
            "embeds": [
              {
                "title": "Houve um problema na aplicação {{.app.metadata.name}}",
                "url": "{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
                "fields": [
                  {
                    "name": "Saúde",
                    "value": "{{.app.status.health.status}}",
                    "inline": "true"
                  },
                  {
                    "name": "Repositório",
                    "value": "{{.app.spec.source.repoURL}}",
                    "inline": "false"
                  }
                  {{range $index, $c := .app.status.conditions}}
                  {{if not $index}},{{end}}
                  {{if $index}},{{end}}
                  {
                    "name": "{{$c.type}}",
                    "value": "{{$c.message}}",
                    "inline": "true"
                  }
                  {{end}}
                ]
              }
            ]
          }

controller:
  replicas: 2
  enableStatefulSet: true
  env:
    - name: "ARGOCD_CONTROLLER_REPLICAS"
      value: "2"
  topologySpreadConstraints:
    - maxSkew: 1
      topologyKey: kubernetes.io/hostname
      whenUnsatisfiable: ScheduleAnyway
      labelSelector:
        matchLabels:
          app.kubernetes.io/component: application-controller

repoServer:
  autoscaling:
    enabled: true
    minReplicas: 2
  topologySpreadConstraints:
    - maxSkew: 1
      topologyKey: kubernetes.io/hostname
      whenUnsatisfiable: ScheduleAnyway
      labelSelector:
        matchLabels:
          app.kubernetes.io/component: repo-server

dex:
  resources:
    limits:
      cpu: 300m
      memory: 500Mi
    requests:
      cpu: 25m
      memory: 50Mi

configs:
  repositories:
    ronald-s-homelab:
      url: https://github.com/Ronald-s-Homelab/personal-homelab
      name: personal-homelab

  cmp:
    create: true
    plugins:
      helm-resolver:
        init:
          command: ["sh", "-c"]
          args: ['helm repo add "$ARGOCD_ENV_REPO_NAME" "$ARGOCD_ENV_REPO"; helm repo update']
        generate:
          command:
            - "sh"
            - "-c"
            - $(git rev-parse --show-toplevel)/tools/argo/helm-resolver.sh

  cm:
    create: true
    application.resourceTrackingMethod: annotation
    statusbadge.enabled: true

    dex.config: |
      connectors:
        - type: github
          id: github
          name: Github (ronald-s-homelab)
          config:
            clientID: $client_id
            clientSecret: $client_secret
            orgs:
            - name: Ronald-s-Homelab
              teams:
                - devops
            teamNameField: both

    jsonnet.enable: false
    kustomize.enable: false

    resource.customizations.ignoreDifferences.admissionregistration.k8s.io_MutatingWebhookConfiguration: |
      jqPathExpressions:
      - '.webhooks[]?.clientConfig.caBundle'

    resource.customizations.ignoreDifferences.admissionregistration.k8s.io_ValidatingWebhookConfiguration: |
      jqPathExpressions:
      - '.webhooks[]?.clientConfig.caBundle'

    server.rbac.log.enforce.enable: true

  params:
    server.disable.auth: false
    server.insecure: true
    server.enable.gzip: true
    controller.status.processors: "50"
    controller.operation.processors: "25"
    controller.repo.server.timeout.seconds: "120"
    # Ref: https://argo-cd.readthedocs.io/en/release-1.8/operator-manual/high_availability/#argocd-repo-server
    # It is commented for future analysis.
    # reposerver.parallelism.limit: ""
  rbac:
    create: true
    policy.csv: |
      p, role:readonly, applicationsets, get, */*, allow
      p, role:admin, applicationsets, *, */*, allow
      g, Ronald-s-Homelab:devops, role:admin
    policy.default: role:readonly

extraObjects:
  - apiVersion: external-secrets.io/v1beta1
    kind: ExternalSecret
    metadata:
      labels:
        app: argocd
      name: argocd-secret-es
    spec:
      dataFrom:
        - extract:
            conversionStrategy: Default
            decodingStrategy: None
            key: ARGOCD_OAUTH_CONFIG
      refreshInterval: 1h0m0s
      secretStoreRef:
        kind: ClusterSecretStore
        name: doppler-css
      target:
        creationPolicy: Merge
        name: argocd-secret
        template:
          type: Opaque

applications:
  - name: self-argocd-in-cluster
    namespace: argocd-system
    additionalLabels: {}
    additionalAnnotations: {}
    finalizers:
      - resources-finalizer.argocd.argoproj.io
    project: default
    sources:
      - repoURL: 'https://argoproj.github.io/argo-helm'
        chart: argo-cd
        targetRevision: 7.5.2
        helm:
          valueFiles:
          - $values/gitops/deploy/argocd/values.yaml
      - repoURL: 'https://github.com/Ronald-s-Homelab/personal-homelab.git'
        targetRevision: main
        ref: values
    destination:
      name: in-cluster
      namespace: argocd-system
    syncPolicy:
